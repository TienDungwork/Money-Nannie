'use client';

import { useState, useEffect } from 'react';
import { Transaction } from '@/types';
import { useTransactions, useCategories } from '@/hooks/useStorage';
import { TransactionItem } from '@/components/TransactionItem';
import { TransactionModal } from '@/components/TransactionModal';
import { TransactionsPage } from '@/components/TransactionsPage';
import { StatsPage } from '@/components/StatsPage';
import { BudgetPage } from '@/components/BudgetPage';
import { ExpenseChart } from '@/components/ExpenseChart';
import { FloatingActionButton } from '@/components/ui/FloatingActionButton';
import { groupTransactionsByDate, formatCurrency, calculateBalance, calculateTotalByType, formatDate } from '@/lib/utils';
import { Home, BarChart3, History, Target } from 'lucide-react';

type TabType = 'home' | 'transactions' | 'stats' | 'budget';

export default function HomePage() {
  const [activeTab, setActiveTab] = useState<TabType>('home');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingTransaction, setEditingTransaction] = useState<Transaction | null>(null);
  const [chartType, setChartType] = useState<'expense' | 'income'>('expense');
  
  const { transactions, loading, addTransaction, updateTransaction, deleteTransaction } = useTransactions();
  const { categories } = useCategories();

  const handleSaveTransaction = (transaction: Transaction) => {
    if (editingTransaction) {
      updateTransaction(transaction.id, transaction);
      setEditingTransaction(null);
    } else {
      addTransaction(transaction);
    }
  };

  const handleEditTransaction = (transaction: Transaction) => {
    setEditingTransaction(transaction);
    setIsModalOpen(true);
  };

  const handleDeleteTransaction = (id: string) => {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a giao d·ªãch n√†y?')) {
      deleteTransaction(id);
    }
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setEditingTransaction(null);
  };

  const recentTransactions = transactions.slice(0, 10);
  const groupedTransactions = groupTransactionsByDate(transactions);

  // T√≠nh danh m·ª•c chi ti√™u nhi·ªÅu nh·∫•t
  const getTopExpenseCategory = (days: number) => {
    const currentMonth = new Date().toISOString().slice(0, 7);
    let filteredTransactions;
    
    if (days === 7) {
      // Tu·∫ßn n√†y - l·∫•y 7 ng√†y g·∫ßn nh·∫•t
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - 7);
      filteredTransactions = transactions.filter(t => 
        t.type === 'expense' && 
        new Date(t.date) >= cutoffDate
      );
    } else {
      // Th√°ng n√†y - l·∫•y t·∫•t c·∫£ giao d·ªãch trong th√°ng hi·ªán t·∫°i
      filteredTransactions = transactions.filter(t => 
        t.type === 'expense' && 
        t.date.startsWith(currentMonth)
      );
    }
    
    // Debug: In ra c√°c giao d·ªãch ƒë·ªÉ ki·ªÉm tra
    console.log('Filtered transactions:', filteredTransactions);
    
    // T√≠nh t·ªïng chi ti√™u theo t·ª´ng danh m·ª•c
    const categoryTotals: { [key: string]: number } = {};
    
    filteredTransactions.forEach(t => {
      console.log('Transaction category:', t.category); // Debug category
      categoryTotals[t.category] = (categoryTotals[t.category] || 0) + t.amount;
    });
    
    console.log('Category totals:', categoryTotals); // Debug totals
    
    // T√¨m danh m·ª•c c√≥ t·ªïng chi ti√™u cao nh·∫•t
    const topCategory = Object.entries(categoryTotals)
      .sort(([,a], [,b]) => b - a)[0];
    
    console.log('Top category:', topCategory); // Debug result
    
    return topCategory ? {
      category: topCategory[0],
      amount: topCategory[1]
    } : null;
  };

  const topWeekExpense = getTopExpenseCategory(7);
  const topMonthExpense = getTopExpenseCategory(30);

  const getCategoryIcon = (category: string) => {
    const icons: { [key: string]: string } = {
      // Danh m·ª•c ti·∫øng Vi·ªát t·ª´ storage.ts
      'ƒÇn u·ªëng': 'üçΩÔ∏è',
      'Di chuy·ªÉn': 'üöó', 
      'Mua s·∫Øm': 'üõçÔ∏è',
      'Gi·∫£i tr√≠': 'üé¨',
      'Y t·∫ø': 'üè•',
      'H·ªçc t·∫≠p': 'üìö',
      'Sinh ho·∫°t': 'üè†',
      'Ho√° ƒë∆°n & Ti·ªán √≠ch': 'üìÑ',
      'Thu√™ nh√†': 'üèòÔ∏è',
      'Ho√° ƒë∆°n n∆∞·ªõc': 'üíß',
      'Ho√° ƒë∆°n ƒëi·ªán tho·∫°i': 'üì±',
      'Ho√° ƒë∆°n ƒëi·ªán': '‚ö°',
      'Ho√° ƒë∆°n gas': 'üî•',
      'Ho√° ƒë∆°n TV': 'üì∫',
      'Ho√° ƒë∆°n internet': 'üåê',
      'Ho√° ƒë∆°n ti·ªán √≠ch kh√°c': 'üîß',
      'L∆∞∆°ng': 'üí∞',
      'Freelance': 'üíª',
      'ƒê·∫ßu t∆∞': 'üìà',
      'Kh√°c': 'üì¶',
      // Fallback cho c√°c key ti·∫øng Anh c≈©
      'food': 'üçΩÔ∏è',
      'transport': 'üöó', 
      'shopping': 'üõçÔ∏è',
      'entertainment': 'üé¨',
      'health': 'üè•',
      'education': 'üìö',
      'bills': 'üí°',
      'investment': 'üìà',
      'salary': 'üí∞',
      'freelance': 'üíº',
      'business': 'üè¢',
      'gift': 'üéÅ',
      'other': 'üì¶'
    };
    
    // T√¨m category theo ID tr∆∞·ªõc
    const categoryById = categories.find(cat => cat.id === category);
    if (categoryById) {
      return categoryById.icon;
    }
    
    // Fallback: t√¨m theo name (cho d·ªØ li·ªáu c≈©) 
    const categoryByName = categories.find(cat => cat.name === category);
    if (categoryByName) {
      return categoryByName.icon;
    }
    
    return icons[category] || 'üì¶';
  };

  const getCategoryName = (category: string) => {
    // Danh m·ª•c ƒë√£ l√† ti·∫øng Vi·ªát t·ª´ storage.ts, tr·∫£ v·ªÅ lu√¥n
    // Ch·ªâ c·∫ßn fallback cho c√°c key ti·∫øng Anh c≈©
    const names: { [key: string]: string } = {
      'food': 'ƒÇn u·ªëng',
      'transport': 'Di chuy·ªÉn',
      'shopping': 'Mua s·∫Øm',
      'entertainment': 'Gi·∫£i tr√≠',
      'health': 'S·ª©c kh·ªèe',
      'education': 'Gi√°o d·ª•c',
      'bills': 'H√≥a ƒë∆°n',
      'investment': 'ƒê·∫ßu t∆∞',
      'salary': 'L∆∞∆°ng',
      'freelance': 'Freelance',
      'business': 'Kinh doanh',
      'gift': 'Qu√† t·∫∑ng',
      'other': 'Kh√°c'
    };
    
    // T√¨m category theo ID tr∆∞·ªõc
    const categoryById = categories.find(cat => cat.id === category);
    if (categoryById) {
      return categoryById.name;
    }
    
    // Fallback: n·∫øu ƒë√£ l√† t√™n ti·∫øng Vi·ªát r·ªìi th√¨ tr·∫£ v·ªÅ lu√¥n
    const categoryByName = categories.find(cat => cat.name === category);
    if (categoryByName) {
      return categoryByName.name;
    }
    
    // N·∫øu l√† ti·∫øng Anh c≈© th√¨ d·ªãch, n·∫øu kh√¥ng th√¨ tr·∫£ v·ªÅ nguy√™n b·∫£n
    return names[category] || category;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg text-gray-600">ƒêang t·∫£i...</div>
      </div>
    );
  }

  const TabButton = ({ tab, icon, label }: { tab: TabType; icon: React.ReactNode; label: string }) => (
    <button
      onClick={() => setActiveTab(tab)}
      className={`flex-1 flex flex-col items-center py-2 px-1 ${
        activeTab === tab
          ? 'text-primary-600 border-t-2 border-primary-600'
          : 'text-gray-400'
      }`}
    >
      {icon}
      <span className="text-xs mt-1">{label}</span>
    </button>
  );

  return (
    <div className="min-h-screen bg-gray-50 pb-20">
      {/* Header */}
      {activeTab !== 'home' && (
        <div className="bg-white shadow-sm">
          <div className="px-4 py-4">
            <h1 className="text-xl font-bold text-gray-900">
              {activeTab === 'transactions' && 'S·ªë giao d·ªãch'}
              {activeTab === 'stats' && 'Th·ªëng k√™'}
              {activeTab === 'budget' && 'Ng√¢n s√°ch'}
            </h1>
          </div>
        </div>
      )}

      {/* Content */}
      <div className="flex-1">
        {activeTab === 'home' && (
          <div className="p-4 space-y-6">
            {/* T·ªïng s·ªë d∆∞ */}
            <div className="bg-white rounded-xl shadow-sm p-4">
              <div className="flex items-center justify-between">
                <span className="text-gray-600">T·ªïng s·ªë d∆∞</span>
                <div className="flex items-center space-x-2">
                  <span className="text-2xl font-bold text-gray-900">
                    {formatCurrency(calculateBalance(transactions))}
                  </span>
                  <button className="p-1 text-gray-400 hover:text-gray-600">
                    üëÅ
                  </button>
                </div>
              </div>
            </div>

            {/* V√≠ c·ªßa Nga */}
            <div className="bg-white rounded-xl shadow-sm">
              <div className="flex items-center justify-between p-4 border-b border-gray-100">
                <h3 className="text-lg font-semibold text-gray-900">V√≠ c·ªßa Nannie</h3>
                <span className="text-green-600 text-sm">Xem t·∫•t c·∫£</span>
              </div>
              <div className="p-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-orange-500 rounded-full flex items-center justify-center">
                    <span className="text-white font-bold">üí≥</span>
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">Ti·ªÅn m·∫∑t</h4>
                  </div>
                  <span className="font-bold text-gray-900">
                    {formatCurrency(calculateBalance(transactions))}
                  </span>
                </div>
              </div>
            </div>

            {/* B√°o c√°o th√°ng n√†y */}
            <div className="bg-white rounded-xl shadow-sm">
              <div className="flex items-center justify-between p-4 border-b border-gray-100">
                <h3 className="text-lg font-semibold text-gray-900">B√°o c√°o th√°ng n√†y</h3>
                <span className="text-green-600 text-sm">Xem b√°o c√°o</span>
              </div>
              <div className="p-4">
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <button 
                    className="text-center p-3 rounded-lg hover:bg-red-50 transition-colors"
                    onClick={() => setChartType('expense')}
                  >
                    <p className="text-sm text-gray-500 mb-1">T·ªïng ƒë√£ chi</p>
                    <p className={`text-xl font-bold ${chartType === 'expense' ? 'text-red-700' : 'text-red-600'}`}>
                      {formatCurrency(calculateTotalByType(transactions.filter(t => {
                        const currentMonth = new Date().toISOString().slice(0, 7);
                        return t.date.startsWith(currentMonth);
                      }), 'expense'))}
                    </p>
                  </button>
                  <button 
                    className="text-center p-3 rounded-lg hover:bg-blue-50 transition-colors"
                    onClick={() => setChartType('income')}
                  >
                    <p className="text-sm text-gray-500 mb-1">T·ªïng thu</p>
                    <p className={`text-xl font-bold ${chartType === 'income' ? 'text-blue-700' : 'text-blue-600'}`}>
                      {formatCurrency(calculateTotalByType(transactions.filter(t => {
                        const currentMonth = new Date().toISOString().slice(0, 7);
                        return t.date.startsWith(currentMonth);
                      }), 'income'))}
                    </p>
                  </button>
                </div>
                
                {/* Chart */}
                <div className="mt-4">
                  <ExpenseChart transactions={transactions} chartType={chartType} />
                </div>
                
                {/* Chart Legend */}
                <div className="flex items-center justify-center space-x-6 mt-4 text-sm">
                  <div className="flex items-center space-x-2">
                    <div className={`w-3 h-3 rounded-full ${chartType === 'expense' ? 'bg-red-500' : 'bg-blue-500'}`}></div>
                    <span className="text-gray-600">{chartType === 'expense' ? 'Chi ti√™u' : 'Thu nh·∫≠p'} th√°ng n√†y</span>
                  </div>
                </div>
              </div>
            </div>

            {/* B√°o c√°o xu h∆∞·ªõng */}
            <div className="bg-white rounded-xl shadow-sm p-4">
              <div className="flex items-center justify-between">
                <span className="text-gray-400">‚Üê</span>
                <span className="text-green-600 font-medium">B√°o c√°o xu h∆∞·ªõng</span>
                <span className="text-gray-400">‚Üí</span>
              </div>
              <div className="flex justify-center space-x-2 mt-2">
                <div className="w-2 h-2 bg-gray-800 rounded-full"></div>
                <div className="w-2 h-2 bg-gray-300 rounded-full"></div>
              </div>
            </div>

            {/* Chi ti√™u nhi·ªÅu nh·∫•t */}
            <div className="bg-white rounded-xl shadow-sm">
              <div className="flex items-center justify-between p-4 border-b border-gray-100">
                <h3 className="text-lg font-semibold text-gray-900">Chi ti√™u nhi·ªÅu nh·∫•t</h3>
                <span className="text-green-600 text-sm">Xem t·∫•t c·∫£</span>
              </div>
              <div className="p-4">
                {/* Tu·∫ßn n√†y */}
                <div className="mb-4">
                  <p className="text-sm text-gray-500 mb-2">Tu·∫ßn n√†y</p>
                  {topWeekExpense ? (
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                          <span className="text-sm">{getCategoryIcon(topWeekExpense.category)}</span>
                        </div>
                        <span className="font-medium text-gray-900">{getCategoryName(topWeekExpense.category)}</span>
                      </div>
                      <span className="font-bold text-red-600">
                        {formatCurrency(topWeekExpense.amount)}
                      </span>
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <span className="text-gray-500">Ch∆∞a c√≥ giao d·ªãch</span>
                    </div>
                  )}
                </div>

                {/* Th√°ng n√†y */}
                <div>
                  <p className="text-sm text-gray-500 mb-2">Th√°ng n√†y</p>
                  {topMonthExpense ? (
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
                          <span className="text-sm">{getCategoryIcon(topMonthExpense.category)}</span>
                        </div>
                        <span className="font-medium text-gray-900">{getCategoryName(topMonthExpense.category)}</span>
                      </div>
                      <span className="font-bold text-red-600">
                        {formatCurrency(topMonthExpense.amount)}
                      </span>
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <span className="text-gray-500">Ch∆∞a c√≥ giao d·ªãch</span>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Giao d·ªãch g·∫ßn ƒë√¢y */}
            <div className="bg-white rounded-xl shadow-sm">
              <div className="flex items-center justify-between p-4 border-b border-gray-100">
                <h3 className="text-lg font-semibold text-gray-900">Giao d·ªãch g·∫ßn ƒë√¢y</h3>
                <span className="text-green-600 text-sm">Xem t·∫•t c·∫£</span>
              </div>
              <div className="p-4">
                {recentTransactions.length === 0 ? (
                  <div className="text-center py-8">
                    <p className="text-gray-500">Ch∆∞a c√≥ giao d·ªãch n√†o</p>
                    <p className="text-sm text-gray-400 mt-1">
                      Nh·∫•n n√∫t + ƒë·ªÉ th√™m giao d·ªãch ƒë·∫ßu ti√™n
                    </p>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {recentTransactions.slice(0, 5).map((transaction) => (
                      <div key={transaction.id} className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center">
                            <span className="text-sm">
                              {getCategoryIcon(transaction.category)}
                            </span>
                          </div>
                          <div>
                            <h4 className="font-medium text-gray-900">{transaction.description}</h4>
                            <p className="text-xs text-gray-500">
                              {formatDate(transaction.date)}
                            </p>
                          </div>
                        </div>
                        <span className={`font-bold ${
                          transaction.type === 'expense' ? 'text-red-600' : 'text-green-600'
                        }`}>
                          {transaction.type === 'expense' ? '-' : '+'}
                          {formatCurrency(transaction.amount)}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'transactions' && (
          <TransactionsPage 
            transactions={transactions}
            onEdit={handleEditTransaction}
            onDelete={handleDeleteTransaction}
          />
        )}

        {activeTab === 'stats' && <BudgetPage transactions={transactions} />}
        
        {activeTab === 'budget' && <StatsPage transactions={transactions} />}
      </div>

      {/* Bottom Navigation */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200">
        <div className="flex">
          <TabButton
            tab="home"
            icon={<Home size={20} />}
            label="T·ªïng quan"
          />
          <TabButton
            tab="transactions"
            icon={<History size={20} />}
            label="S·ªë giao d·ªãch"
          />
          <TabButton
            tab="stats"
            icon={<BarChart3 size={20} />}
            label="Ng√¢n s√°ch"
          />
          <TabButton
            tab="budget"
            icon={<Target size={20} />}
            label="Th·ªëng k√™"
          />
        </div>
      </div>

      {/* Floating Action Button */}
      <FloatingActionButton
        onClick={() => setIsModalOpen(true)}
        className="mb-20"
      />

      {/* Transaction Modal */}
      <TransactionModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onSave={handleSaveTransaction}
        categories={categories}
        transaction={editingTransaction}
      />
    </div>
  );
}
