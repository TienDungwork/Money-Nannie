'use client';

import { useState, useEffect } from 'react';
import { Transaction, Category } from '@/types';

interface TopExpensesWidgetProps {
  transactions: Transaction[];
  categories: Category[];
}

interface ExpenseData {
  category: string;
  amount: number;
  percentage: number;
  icon: string;
  name: string;
}

export function TopExpensesWidget({ transactions, categories }: TopExpensesWidgetProps) {
  const [activeTab, setActiveTab] = useState<'week' | 'month'>('week');
  const [forceUpdate, setForceUpdate] = useState(0);

  // Force re-render khi transactions ho·∫∑c categories thay ƒë·ªïi
  useEffect(() => {
    setForceUpdate(prev => prev + 1);
  }, [transactions, categories]);

  const getCategoryIcon = (categoryId: string) => {
    // Mapping HO√ÄN CH·ªàNH cho key-based icons (t·ª´ IconPicker) - CHECK TR∆Ø·ªöC
    const keyToIconMap: { [key: string]: string } = {
      // Ti·ªÅn t·ªá
      'DollarSign': 'üí≤',
      'Banknote': 'üíµ', 
      'CreditCard': 'üí≥',
      'Wallet': 'üëõ',
      'PiggyBank': 'üê∑',
      'TrendingUp': 'üìà',
      'HandCoins': 'ü§≤',
      'Receipt': 'üßæ',
      
      // ƒÇn u·ªëng
      'UtensilsCrossed': 'üçΩÔ∏è',
      'Coffee': '‚òï',
      'Pizza': 'üçï',
      'ChefHat': 'üë®‚Äçüç≥',
      'Cake': 'üéÇ',
      'Beer': 'üç∫',
      'Apple': 'üçé',
      'Bread': 'üçû',
      'Rice': 'üçö',
      'Noodles': 'üçú',
      
      // Di chuy·ªÉn
      'Car': 'üöó',
      'Fuel': '‚õΩ',
      'Bus': 'üöå',
      'Train': 'üöä',
      'Plane': '‚úàÔ∏è',
      'Bike': 'üö≤',
      'Motorcycle': 'üèçÔ∏è',
      'Taxi': 'üöï',
      'ParkingCircle': 'üÖøÔ∏è',
      'Wrench': 'üîß',
      
      // Nh√† c·ª≠a
      'Home': 'üè†',
      'Zap': '‚ö°',
      'Droplets': 'üíß',
      'Wifi': 'üì∂',
      'Tv': 'üì∫',
      'Flame': 'üî•',
      'Bed': 'üõèÔ∏è',
      'Sofa': 'üõãÔ∏è',
      'Bath': 'üõÅ',
      'Kitchen': 'üç≥',
      
      // Mua s·∫Øm
      'ShoppingBag': 'üõçÔ∏è',
      'ShoppingCart': 'üõí',
      'Gift': 'üéÅ',
      'Shirt': 'üëï',
      'Shoes': 'üëü',
      'Watch': '‚åö',
      'Bag': 'üéí',
      'Glasses': 'üëì',
      'Sparkles': '‚ú®',
      'Perfume': 'üß¥',
      
      // Gi·∫£i tr√≠
      'GameController': 'üéÆ',
      'Music': 'üéµ',
      'Movie': 'üé¨',
      'Camera': 'üì∑',
      'Book': 'üìñ',
      'Sport': '‚öΩ',
      'Gym': 'üèãÔ∏è',
      'Swimming': 'üèä',
      'Travel': 'üß≥',
      'Beach': 'üèñÔ∏è',
      
      // S·ª©c kh·ªèe
      'Hospital': 'üè•',
      'Medicine': 'üíä',
      'Doctor': 'üë®‚Äç‚öïÔ∏è',
      'Stethoscope': 'ü©∫',
      'Syringe': 'üíâ',
      'Dental': 'ü¶∑',
      'Glasses2': 'üëì',
      'Heart': '‚ù§Ô∏è',
      
      // Gi√°o d·ª•c
      'School': 'üè´',
      'BookOpen': 'üìö',
      'Pencil': '‚úèÔ∏è',
      'Calculator': 'üî¢',
      'Computer': 'üíª',
      'Graduation': 'üéì',
      'Certificate': 'üìú',
      
      // C√¥ng vi·ªác
      'Briefcase': 'üíº',
      'Office': 'üè¢',
      'Phone': 'üì±',
      'Email': 'üìß',
      'Calendar': 'üìÖ',
      'Meeting': 'üë•',
      'Presentation': 'üìä',
      
      // Kh√°c
      'User': 'üë§',
      'Family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      'Pet': 'üêï',
      'Insurance': 'üõ°Ô∏è',
      'Tax': 'üßæ',
      'Charity': 'ü§ù',
      'Tools': 'üî®',
      'Settings': '‚öôÔ∏è',
      'Star': '‚≠ê',
      'Question': '‚ùì',
      'Building': 'üè¢',
      'Factory': 'üè≠',
      'Hammer': 'üî®',
      'Scissors': '‚úÇÔ∏è',
    };

    // 1. Check key mapping TR∆Ø·ªöC TI√äN
    if (keyToIconMap[categoryId]) {
      return keyToIconMap[categoryId];
    }
    
    // 2. T√¨m category object
    const categoryObj = categories.find(c => c.id === categoryId);
    
    // 3. N·∫øu c√≥ icon key trong category object, check mapping
    if (categoryObj?.icon && keyToIconMap[categoryObj.icon]) {
      return keyToIconMap[categoryObj.icon];
    }
    
    // 4. N·∫øu icon l√† emoji lu√¥n (length <= 4)
    if (categoryObj?.icon && categoryObj.icon.length <= 4) {
      return categoryObj.icon;
    }

    // 5. Fallback cho tr∆∞·ªùng h·ª£p category c≈© ho·∫∑c kh√¥ng c√≥ icon
    const defaultIcons: { [key: string]: string } = {
      'ƒÇn u·ªëng': 'üçΩÔ∏è',
      'Di chuy·ªÉn': 'üöó', 
      'Mua s·∫Øm': 'üõçÔ∏è',
      'Gi·∫£i tr√≠': 'üé¨',
      'Y t·∫ø': 'üè•',
      'H·ªçc t·∫≠p': 'üìö',
      'Sinh ho·∫°t': 'üè†',
      'Ho√° ƒë∆°n & Ti·ªán √≠ch': 'üßæ',
      'Thu√™ nh√†': 'üèòÔ∏è',
      'Ho√° ƒë∆°n n∆∞·ªõc': 'üíß',
      'Ho√° ƒë∆°n ƒëi·ªán tho·∫°i': 'üì±',
      'Ho√° ƒë∆°n ƒëi·ªán': '‚ö°',
      'Ho√° ƒë∆°n gas': 'üî•',
      'Ho√° ƒë∆°n TV': 'üì∫',
      'Ho√° ƒë∆°n internet': 'üåê',
      'Ho√° ƒë∆°n ti·ªán √≠ch kh√°c': 'üîß',
      'L∆∞∆°ng': 'üí∞',
      'Freelance': 'üíª',
      'ƒê·∫ßu t∆∞': 'üìà',
      'Kh√°c': 'üì¶',
      'v·ª©t ti·ªÅn': 'üí∏',
      'XƒÉng xe': '‚õΩ',
      'ƒê·ªì d√πng c√° nh√¢n': 'üë§',
      'hihi': 'üòÇ',
    };
    return defaultIcons[categoryObj?.name || categoryId] || 'üì¶';
  };

  const getCategoryName = (category: string) => {
    const categoryObj = categories.find(c => c.id === category);
    return categoryObj?.name || category;
  };

  const getTopExpenseCategories = (period: 'week' | 'month'): ExpenseData[] => {
    const now = new Date();
    let filteredTransactions: Transaction[];
    
    if (period === 'week') {
      // Tu·∫ßn n√†y - t·ª´ th·ª© 2 ƒë·∫øn Ch·ªß nh·∫≠t c·ªßa tu·∫ßn hi·ªán t·∫°i
      const startOfWeek = new Date(now);
      const dayOfWeek = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // ƒêi·ªÅu ch·ªânh ƒë·ªÉ b·∫Øt ƒë·∫ßu t·ª´ th·ª© 2
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6); // Ch·ªß nh·∫≠t
      endOfWeek.setHours(23, 59, 59, 999);
      
      filteredTransactions = transactions.filter(t => {
        const transactionDate = new Date(t.date);
        return t.type === 'expense' && 
               transactionDate >= startOfWeek && 
               transactionDate <= endOfWeek;
      });
    } else {
      // Th√°ng n√†y - t·ª´ ng√†y 1 ƒë·∫øn ng√†y cu·ªëi th√°ng hi·ªán t·∫°i
      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
      startOfMonth.setHours(0, 0, 0, 0);
      
      const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0); // Ng√†y cu·ªëi th√°ng
      endOfMonth.setHours(23, 59, 59, 999);
      
      filteredTransactions = transactions.filter(t => {
        const transactionDate = new Date(t.date);
        return t.type === 'expense' && 
               transactionDate >= startOfMonth && 
               transactionDate <= endOfMonth;
      });
    }
    
    // Nh√≥m theo danh m·ª•c cha
    const parentCategoryTotals: { [key: string]: number } = {};
    let totalExpense = 0;
    
    filteredTransactions.forEach(t => {
      // T√¨m danh m·ª•c c·ªßa giao d·ªãch
      const category = categories.find(c => c.id === t.category);
      if (category) {
        // N·∫øu c√≥ danh m·ª•c cha, nh√≥m v√†o danh m·ª•c cha, n·∫øu kh√¥ng th√¨ d√πng ch√≠nh n√≥
        const parentCategoryId = category.parentId || category.id;
        const parentCategory = categories.find(c => c.id === parentCategoryId);
        
        if (parentCategory) {
          parentCategoryTotals[parentCategoryId] = (parentCategoryTotals[parentCategoryId] || 0) + t.amount;
          totalExpense += t.amount;
        }
      }
    });
    
    // S·∫Øp x·∫øp v√† l·∫•y top 3
    const sortedCategories = Object.entries(parentCategoryTotals)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .map(([categoryId, amount]) => {
        const category = categories.find(c => c.id === categoryId);
        return {
          category: categoryId,
          amount,
          percentage: totalExpense > 0 ? (amount / totalExpense) * 100 : 0,
          icon: getCategoryIcon(categoryId),
          name: category?.name || categoryId
        };
      });
    
    return sortedCategories;
  };

  const weekTopExpenses = getTopExpenseCategories('week');
  const monthTopExpenses = getTopExpenseCategories('month');
  const currentData = activeTab === 'week' ? weekTopExpenses : monthTopExpenses;

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const getDateRangeText = (period: 'week' | 'month') => {
    const now = new Date();
    
    if (period === 'week') {
      const startOfWeek = new Date(now);
      const dayOfWeek = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      
      return `${startOfWeek.getDate()}/${startOfWeek.getMonth() + 1} - ${endOfWeek.getDate()}/${endOfWeek.getMonth() + 1}`;
    } else {
      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
      const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);
      return `${startOfMonth.getDate()}/${startOfMonth.getMonth() + 1} - ${endOfMonth.getDate()}/${endOfMonth.getMonth() + 1}`;
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm">
      <div className="flex items-center justify-between p-4 border-b border-gray-100">
        <h3 className="text-lg font-semibold text-gray-900">Chi ti√™u nhi·ªÅu nh·∫•t</h3>
        <span className="text-green-600 text-sm">Xem t·∫•t c·∫£</span>
      </div>
      
      {/* Tab switcher */}
      <div className="px-4 pt-4">
        <div className="flex bg-gray-100 rounded-lg p-1">
          <button
            onClick={() => setActiveTab('week')}
            className={`flex-1 py-2 px-3 rounded-md text-sm font-medium transition-colors ${
              activeTab === 'week'
                ? 'bg-white text-gray-900 shadow-sm'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            <div className="flex flex-col">
              <span>Tu·∫ßn n√†y</span>
              <span className="text-xs opacity-75">{getDateRangeText('week')}</span>
            </div>
          </button>
          <button
            onClick={() => setActiveTab('month')}
            className={`flex-1 py-2 px-3 rounded-md text-sm font-medium transition-colors ${
              activeTab === 'month'
                ? 'bg-white text-gray-900 shadow-sm'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            <div className="flex flex-col">
              <span>Th√°ng n√†y</span>
              <span className="text-xs opacity-75">{getDateRangeText('month')}</span>
            </div>
          </button>
        </div>
      </div>

      <div className="p-4">
        {currentData.length === 0 ? (
          <div className="text-center py-8">
            <span className="text-gray-500">Ch∆∞a c√≥ giao d·ªãch</span>
          </div>
        ) : (
          <div className="space-y-3">
            {currentData.map((expense, index) => (
              <div key={expense.category} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                    <span className="text-lg">{expense.icon}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-900 block">{expense.name}</span>
                    <span className="text-sm text-gray-500">{formatCurrency(expense.amount)}</span>
                  </div>
                </div>
                <div className="text-right">
                  <span className="font-bold text-red-600 text-lg">
                    {expense.percentage.toFixed(1)}%
                  </span>
                  {index === 0 && (
                    <div className="text-xs text-gray-500 mt-1">Cao nh·∫•t</div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
