'use client';

import React from 'react';
import { Transaction, Category } from '@/types';
import { formatCurrency, formatDetailedDate } from '@/lib/utils';
import { ArrowUpCircle, ArrowDownCircle, Trash2, Edit } from 'lucide-react';
import { defaultCategories } from '@/lib/storage';

interface TransactionItemProps {
  transaction: Transaction;
  categories: Category[];
  onEdit?: (transaction: Transaction) => void;
  onDelete?: (id: string) => void;
}

export function TransactionItem({ transaction, categories, onEdit, onDelete }: TransactionItemProps) {
  const isIncome = transaction.type === 'income';
  
  // H√†m l·∫•y icon category - ƒê·ªíNG B·ªò V·ªöI TopExpensesWidget
  const getCategoryIcon = (categoryId: string) => {
    // Mapping HO√ÄN CH·ªàNH cho key-based icons (t·ª´ IconPicker) - CHECK TR∆Ø·ªöC TI√äN
    const keyToIconMap: { [key: string]: string } = {
      // Ti·ªÅn t·ªá
      'DollarSign': 'üí≤',
      'Banknote': 'üíµ', 
      'CreditCard': 'üí≥',
      'Wallet': 'üëõ',
      'PiggyBank': 'üê∑',
      'TrendingUp': 'üìà',
      'HandCoins': 'ü§≤',
      'Receipt': 'üßæ',
      
      // ƒÇn u·ªëng
      'UtensilsCrossed': 'üçΩÔ∏è',
      'Coffee': '‚òï',
      'Pizza': 'üçï',
      'ChefHat': 'üë®‚Äçüç≥',
      'Cake': 'üéÇ',
      'Beer': 'üç∫',
      'Apple': 'üçé',
      'Bread': 'üçû',
      'Rice': 'üçö',
      'Noodles': 'üçú',
      
      // Di chuy·ªÉn
      'Car': 'üöó',
      'Fuel': '‚õΩ',
      'Bus': 'üöå',
      'Train': 'üöä',
      'Plane': '‚úàÔ∏è',
      'Bike': 'üö≤',
      'Motorcycle': 'üèçÔ∏è',
      'Taxi': 'üöï',
      'ParkingCircle': 'üÖøÔ∏è',
      'Wrench': 'üîß',
      
      // Nh√† c·ª≠a
      'Home': 'üè†',
      'Zap': '‚ö°',
      'Droplets': 'üíß',
      'Wifi': 'üì∂',
      'Tv': 'üì∫',
      'Flame': 'üî•',
      'Bed': 'üõèÔ∏è',
      'Sofa': 'üõãÔ∏è',
      'Bath': 'üõÅ',
      'Kitchen': 'üç≥',
      
      // Mua s·∫Øm
      'ShoppingBag': 'üõçÔ∏è',
      'ShoppingCart': 'üõí',
      'Gift': 'üéÅ',
      'Shirt': 'üëï',
      'Shoes': 'üëü',
      'Watch': '‚åö',
      'Bag': 'üéí',
      'Glasses': 'üëì',
      'Sparkles': '‚ú®',
      'Perfume': 'üß¥',
      
      // Gi·∫£i tr√≠
      'GameController': 'üéÆ',
      'Music': 'üéµ',
      'Movie': 'üé¨',
      'Camera': 'üì∑',
      'Book': 'üìñ',
      'Sport': '‚öΩ',
      'Gym': 'üèãÔ∏è',
      'Swimming': 'üèä',
      'Travel': 'üß≥',
      'Beach': 'üèñÔ∏è',
      
      // S·ª©c kh·ªèe
      'Hospital': 'üè•',
      'Medicine': 'üíä',
      'Doctor': 'üë®‚Äç‚öïÔ∏è',
      'Stethoscope': 'ü©∫',
      'Syringe': 'üíâ',
      'Dental': 'ü¶∑',
      'Glasses2': 'üëì',
      'Heart': '‚ù§Ô∏è',
      
      // Gi√°o d·ª•c
      'School': 'üè´',
      'BookOpen': 'üìö',
      'Pencil': '‚úèÔ∏è',
      'Calculator': 'üî¢',
      'Computer': 'üíª',
      'Graduation': 'üéì',
      'Certificate': 'üìú',
      
      // C√¥ng vi·ªác
      'Briefcase': 'üíº',
      'Office': 'üè¢',
      'Phone': 'üì±',
      'Email': 'üìß',
      'Calendar': 'üìÖ',
      'Meeting': 'üë•',
      'Presentation': 'üìä',
      
      // Kh√°c
      'User': 'üë§',
      'Family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      'Pet': 'üêï',
      'Insurance': 'üõ°Ô∏è',
      'Tax': 'üßæ',
      'Charity': 'ü§ù',
      'Tools': 'üî®',
      'Settings': '‚öôÔ∏è',
      'Star': '‚≠ê',
      'Question': '‚ùì',
      'Building': 'üè¢',
      'Factory': 'üè≠',
      'Hammer': 'üî®',
      'Scissors': '‚úÇÔ∏è',
    };

    // 1. Check key mapping TR∆Ø·ªöC TI√äN
    if (keyToIconMap[categoryId]) {
      return keyToIconMap[categoryId];
    }
    
    // 2. T√¨m category object
    const categoryObj = categories.find(c => c.id === categoryId);
    
    // 3. N·∫øu c√≥ icon key trong category object, check mapping
    if (categoryObj?.icon && keyToIconMap[categoryObj.icon]) {
      return keyToIconMap[categoryObj.icon];
    }
    
    // 4. N·∫øu icon l√† emoji lu√¥n (length <= 4)
    if (categoryObj?.icon && categoryObj.icon.length <= 4) {
      return categoryObj.icon;
    }

    // 5. Fallback cho tr∆∞·ªùng h·ª£p category c≈© ho·∫∑c kh√¥ng c√≥ icon
    const defaultIcons: { [key: string]: string } = {
      'ƒÇn u·ªëng': 'üçΩÔ∏è',
      'Di chuy·ªÉn': 'üöó', 
      'Mua s·∫Øm': 'üõçÔ∏è',
      'Gi·∫£i tr√≠': 'üé¨',
      'Y t·∫ø': 'üè•',
      'H·ªçc t·∫≠p': 'üìö',
      'Sinh ho·∫°t': 'üè†',
      'Ho√° ƒë∆°n & Ti·ªán √≠ch': 'üßæ',
      'Thu√™ nh√†': 'üèòÔ∏è',
      'Ho√° ƒë∆°n n∆∞·ªõc': 'üíß',
      'Ho√° ƒë∆°n ƒëi·ªán tho·∫°i': 'üì±',
      'Ho√° ƒë∆°n ƒëi·ªán': '‚ö°',
      'Ho√° ƒë∆°n gas': 'üî•',
      'Ho√° ƒë∆°n TV': 'üì∫',
      'Ho√° ƒë∆°n internet': 'üåê',
      'Ho√° ƒë∆°n ti·ªán √≠ch kh√°c': 'üîß',
      'L∆∞∆°ng': 'üí∞',
      'Freelance': 'üíª',
      'ƒê·∫ßu t∆∞': 'üìà',
      'Kh√°c': 'üì¶',
      'v·ª©t ti·ªÅn': 'üí∏',
      'XƒÉng xe': '‚õΩ',
      'ƒê·ªì d√πng c√° nh√¢n': 'üë§',
      'hihi': 'üòÇ',
    };
    
    const fallbackIcon = defaultIcons[categoryObj?.name || categoryId] || 'üì¶';
    return fallbackIcon;
  };

  const getCategoryName = (categoryId: string) => {
    // T√¨m category theo ID tr∆∞·ªõc ti√™n
    const categoryById = categories.find(cat => cat.id === categoryId);
    if (categoryById) {
      return categoryById.name;
    }
    
    // T√¨m theo name (cho d·ªØ li·ªáu c≈©)
    const categoryByName = categories.find(cat => cat.name === categoryId);
    if (categoryByName) {
      return categoryByName.name;
    }

    // Fallback cho c√°c key ti·∫øng Anh c≈©
    const names: { [key: string]: string } = {
      'food': 'ƒÇn u·ªëng',
      'transport': 'Di chuy·ªÉn',
      'shopping': 'Mua s·∫Øm',
      'entertainment': 'Gi·∫£i tr√≠',
      'health': 'S·ª©c kh·ªèe',
      'education': 'Gi√°o d·ª•c',
      'bills': 'H√≥a ƒë∆°n',
      'investment': 'ƒê·∫ßu t∆∞',
      'salary': 'L∆∞∆°ng',
      'freelance': 'Freelance',
      'business': 'Kinh doanh',
      'gift': 'Qu√† t·∫∑ng',
      'other': 'Kh√°c'
    };
    
    // N·∫øu l√† ti·∫øng Anh c≈© th√¨ d·ªãch, n·∫øu kh√¥ng th√¨ tr·∫£ v·ªÅ nguy√™n b·∫£n
    return names[categoryId] || categoryId;
  };
  
  const categoryName = getCategoryName(transaction.category);
  const categoryIcon = getCategoryIcon(transaction.category);

  return (
    <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-100">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className={`p-2 rounded-full ${isIncome ? 'bg-success-50' : 'bg-danger-50'}`}>
            <span className="text-lg">{categoryIcon}</span>
          </div>
          
          <div>
            <h3 className="font-medium text-gray-900">{categoryName}</h3>
            <p className="text-sm text-gray-500">{transaction.description}</p>
            {transaction.withPerson && (
              <p className="text-xs text-blue-600">V·ªõi {transaction.withPerson}</p>
            )}
            {transaction.note && (
              <p className="text-xs text-gray-400 mt-1">{transaction.note}</p>
            )}
            <p className="text-xs text-gray-400 mt-1">{formatDetailedDate(transaction.date)}</p>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <div className="text-right">
            <p className={`font-semibold ${isIncome ? 'text-success-600' : 'text-danger-600'}`}>
              {isIncome ? '+' : '-'}{formatCurrency(transaction.amount)}
            </p>
          </div>
          
          <div className="flex space-x-1">
            {onEdit && (
              <button
                onClick={() => onEdit(transaction)}
                className="p-1 text-gray-400 hover:text-primary-600 transition-colors"
              >
                <Edit size={16} />
              </button>
            )}
            {onDelete && (
              <button
                onClick={() => onDelete(transaction.id)}
                className="p-1 text-gray-400 hover:text-danger-600 transition-colors"
              >
                <Trash2 size={16} />
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
